======SELF-SIGNED CA CERT============

# Generate private key for CA
openssl genpkey -algorithm RSA -out ca-key.pem


# Generate self-signed CA certificate
# Example of adding extensions to the CA certificate
openssl req -new -key ca-key.pem -out ca.csr -subj "/C=US/ST=CA/L=SF/O=SelfSignersInc/OU=Department/CN=My Self-Signed Root CA"
openssl x509 -req -in ca.csr -signkey ca-key.pem -out ca-cert.pem -days 3650 -extfile <(printf "\
basicConstraints=CA:TRUE\n\
keyUsage = keyCertSign, cRLSign\n\
subjectKeyIdentifier=hash\n\
authorityKeyIdentifier=keyid:always,issuer\n")


======GENERATE CERTIFICATE FOR WEBSITE======
#private key
openssl genpkey -algorithm RSA -out server-key.pem


#Generate Certificate Signing Request (CSR):
openssl req -new -key server-key.pem -out server.csr -config openssl.cnf



#v3.ext should have
[ req ]
default_bits        = 2048
distinguished_name  = req_distinguished_name
req_extensions      = req_ext
x509_extensions     = v3_req
prompt              = no

[ req_distinguished_name ]
C  = US
ST = CA
L  = SF
O  = SelfSignersInc
OU = Department
CN = sub.domain.com

[ req_ext ]
subjectAltName      = @alt_names

[ v3_ca ]
subjectAltName = @alt_names
keyUsage = keyCertSign, cRLSign
basicConstraints = critical, CA:TRUE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer

[ v3_req ]
subjectAltName      = @alt_names
basicConstraints	= CA:FALSE
authorityKeyIdentifier	= keyid,issuer
extendedKeyUsage 	= serverAuth
keyUsage 			= digitalSignature, keyEncipherment

[ alt_names ]
DNS.1   = sub.domain.com
IP.1    = 192.168.2.1
IP.2	= 192.168.2.2
IP.3	= 192.168.2.3
IP.4	= 192.168.2.4


#Generate website certificate signed by CA (398 days is max per RFC 5280, setting to 390)
openssl x509 -req -in server.csr -CA ca-cert.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -days 390 -sha256 -extfile openssl.cnf -extensions v3_req



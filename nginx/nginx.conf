user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

#### A1. SET SITE_ROOT TO FRONT END DIR
#### A2. check ssl_certificate path to file
#### B. ITERATIVELY SET ACL READABLE FOR u:www-data ON EVERY DIR IN THE PATH OF THE THE TARGET DIR WHEN SAID DIR IS IN 3RD USER HOME DIR
#### C. SET PASSWORD FOR PASSWORD PAGE BELOW!

#### example: sudo setfacl -m u:www-data:rx <path>
#### verify: getfacl <path>
#### test: sudo -u www-data stat <path-to-file-in-$SITE_ROOT>

events {
        worker_connections 768;
        # multi_accept on;
}

http {

    map "" $SITE_ROOT {
		default "/home/uzun/Development/Bobik/frontend";
    }
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    map $ssl_client_verify $cert_auth {
        default "0";            # No valid client cert
        SUCCESS "1";            # Valid client cert
    }

    map $http_cookie $session_auth {
        default "0";            # No session
        "~auth_session=valid" "1";  # Valid session
    }

    map "$cert_auth:$session_auth" $auth_allowed {
        default "0";  # Default to deny access
        "1:0" "1";    # Allow if client cert is valid
        "0:1" "1";    # Allow if session auth is valid
        "1:1" "1";    # Allow if both are valid
    }


    server {
        listen       80;
        server_name bobik.lan 192.168.99.5;
        return 301 https://bobik.lan$request_uri;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        listen 443 ssl http2;
        server_name bobik.lan 192.168.99.5;

        ssl_certificate /home/uzun/Development/Bobik/server-keys/bobik-cert.pem;
        ssl_certificate_key /home/uzun/Development/Bobik/server-keys/bobik-key.pem;
        ssl_client_certificate  /home/uzun/Development/Bobik/server-keys/bobik-client-ca.pem;
        ssl_verify_client optional;  # Allow clients without certs

        location /manifest.json {
            root $SITE_ROOT;
            index manifest.json;
        }

        location = /video { return 301 /video/; }

        location /video/ {
            proxy_pass         http://sauron:5000/api/main_cam?bbox=1&fps=5&h=720&motion=1;  # trailing slash strips /video/
            proxy_http_version 1.1;

            # forward client/meta
            proxy_set_header   Host               $host;
            proxy_set_header   X-Real-IP          $remote_addr;
            proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto  $scheme;
            proxy_set_header   X-Forwarded-Prefix /video;

            # websockets
            proxy_set_header   Upgrade            $http_upgrade;
            proxy_set_header   Connection         $connection_upgrade;

            # streaming-friendly
            proxy_buffering    off;
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;

            # --- Redirect rewriting (avoid loops) ---
            # 1) Relative paths that do NOT already start with /video/
            proxy_redirect     ~^/(?!video/)(.*)$  /video/$1;
            # 2) Absolute URLs from sauron â†’ prefix with /video/
            proxy_redirect     http://sauron.lan:5000/  /video/;
            proxy_redirect     https://sauron.lan:5000/ /video/;

            # Optional: don't auto-make absolute redirects (keeps them relative)
            absolute_redirect  off;

            # --- Rewrite root-relative URLs in HTML/inline JS ---
            proxy_set_header   Accept-Encoding "";              # allow body rewrite
            sub_filter_types   text/html application/javascript;
            sub_filter_once    off;

            # Fix <base> and inject if missing (prevents SPA from jumping to /)
            sub_filter '<base href="/' '<base href="/video/';
            sub_filter '</head>' '<base href="/video/"></head>';

            # Fix links/assets
            sub_filter 'href="/'     'href="/video/';
            sub_filter 'src="/'      'src="/video/';
            sub_filter 'action="/'   'action="/video/';

            # Fix root-relative API/WS references in inline JS
            sub_filter '"/api/'      '"/video/api/';
            sub_filter "'/api/"      "'/video/api/";
        }


	   location /icon192.png {
            root $SITE_ROOT;
            index icon192.png;
        }

        location /icon512.png {
            root $SITE_ROOT;
            index icon512.png;
        }

        location / {
            # If authentication is valid, forward to backend
	    root $SITE_ROOT;
            index index.html;
            try_files $uri $uri/ =404;

            # If no authentication, redirect to /passwordauth
            if ($auth_allowed = "0") {
                return 302 /passwordauth;
            }
        }

        location /passwordauth {
       		alias $SITE_ROOT/;
		index password.html;
	}

    location /validate-password {
        if ($arg_password = "bobik") {
            add_header Set-Cookie "auth_session=valid; Path=/; HttpOnly; Secure; Max-Age=60";
                return 302 /;  # Redirect back to "/" after successful login
            }
            return 302 /passwordauth;
        }
    }

    include servers/*;
}
